@page "/"
@inject Liff Liff
@inject IJSRuntime JSRuntime

<div class="card" style="width: 20rem;">
    @if (Profile != null)
    {
    <img class="card-img" src="@Profile?.PictureUrl" />
    <div class="card-body">
        <h5 class="card-title">@Profile?.DisplayName</h5>
        <p class="card-text">@Profile?.StatusMessage</p>
    </div>
    }
    else
    {
    <div class="card-body">
        <button class="btn btn-info" onclick="@LoadProfileAsync">プロファイル読み込み</button>
    </div>
    }
    <ul class="list-group">
        <li class="list-group-item">Language: @Data?.Language</li>
        <li class="list-group-item">Type: @Data?.Context.Type</li>
        <li class="list-group-item">ViewType: @Data?.Context.ViewType</li>
        <li class="list-group-item">UserId: @Data?.Context.UserId</li>
        @if (@Data?.Context.Type == ContextType.Utou)
        {
        <li class="list-group-item">UtouId: @Data?.Context.UtouId</li>
        }
        else if (@Data?.Context.Type == ContextType.Room)
        {
        <li class="list-group-item">RoomId: @Data?.Context.RoomId</li>
        }
        else if (@Data?.Context.Type == ContextType.Group)
        {
        <li class="list-group-item">GroupId: @Data?.Context.GroupId</li>
        }
    </ul>
</div>

@functions{
    LiffData Data { get; set;}
    Profile Profile { get; set;}

    protected override void OnInit()
    {
        Liff.InitSuccess += async (_, __) =>
        {
            Data = Liff.Data;
            if(Liff.Profile == null)
            {
                await LoadProfileAsync();    
            }else
            {
                Profile = Liff.Profile;
                await JSRuntime.InvokeAsync<object>("liffInterop.alert", "StateHasChanged");
                StateHasChanged(); 
            }
        };
 
        Liff.InitError += async (_, args) =>
            await JSRuntime.InvokeAsync<object>("liffInterop.alert", args.Error);
    }

    protected override async Task OnAfterRenderAsync()
    {
        await Liff.InitializeAsync(JSRuntime);
    }

    private async Task LoadProfileAsync()
    {
        try
        {
            await Liff.LoadProfileAsync();
        }
        catch (Exception e)
        {
            await JSRuntime.InvokeAsync<object>("liffInterop.alert", e.ToString());
        }
        Data = Liff.Data;
        Profile = Liff.Profile;
        await JSRuntime.InvokeAsync<object>("liffInterop.alert", "StateHasChanged");
        StateHasChanged();
    }
}
